{"version":3,"file":"static/chunks/8939.7341cd5af6b2fda9.js","mappings":"s4BA0BA,SAASA,GAAY,SACnBC,EADmB,QAEnBC,EAAU,SAFS,SAGnBC,GAAW,IAMX,OACE,mBACEC,KAAK,SACLF,QAASA,EACTC,SAAUA,EACVE,UACE,mOALJ,SAQGJ,IAKP,SAASK,GAAa,WACpBC,EADoB,SAEpBN,IAKA,OACE,iBAAKI,UAAU,oDAAf,WACE,eAAIA,UAAU,YAAd,SAA2BE,KAC3B,gBAAKF,UAAU,kEAAf,SACGJ,OAMT,SAASO,IACP,OACE,mBACEL,UAAU,EACVC,KAAK,SACLC,UAAWI,GAAAA,CACT,yGACA,6BALJ,kBAaJ,SAASC,GAAW,QAClBC,EADkB,MAElBC,EAFkB,WAGlBC,EAHkB,OAIlBC,EAJkB,eAKlBC,EALkB,UAMlBC,IAUA,MAAM,EAACC,EAAD,EAAcC,IAAkBC,EAAAA,EAAAA,WAAkB,IAgBxDC,EAAAA,EAAAA,YAAU,KAIJJ,GAAaC,GACfJ,GAAWF,GAAWA,EAAU,MAEjC,CAACK,EAAWC,EAAaJ,IAE5B,MACMQ,EADeJ,IAAgBD,EACH,UAAY,OAE9C,OACE,mBACEd,QA5BY,KACda,IAAiBO,MAAKC,IACfA,IAIDT,GACFA,IAGFI,GAAe,QAmBff,SAAUQ,GAAWC,EACrBR,KAAK,SACLC,UAAWI,GAAAA,CACT,mKACA,CACE,0DAA2DE,EAAUC,IAP3E,SAWGS,IAaP,SAASG,GAAW,UAAEC,EAAF,gBAAaC,EAAb,WAA8Bb,EAA9B,MAA0CD,EAA1C,QAAiDD,IACnE,MAAM,EAACgB,EAAD,EAAaC,IAAiBT,EAAAA,EAAAA,UAAiB,KAC/C,EAACU,EAAD,EAAaC,IAAiBX,EAAAA,EAAAA,UAAwB,OACtD,EAACH,EAAD,EAAYe,IAAgBZ,EAAAA,EAAAA,WAAkB,GAC9Ca,GAAeC,EAAAA,EAAAA,QAAyB,MAExCC,EAAqBC,EAAAA,EAAAA,uBAG3B,SAAiCC,GAC/BV,EAAgBU,GAChBC,EAAuB,CACrBC,UAAW,CACTC,YAAaH,EAAUI,MAG3BT,GAAa,MATTM,EAAyBF,EAAAA,EAAAA,4BAoC/B,OAJAf,EAAAA,EAAAA,YAAU,KACRY,EAAarB,SAAS8B,UACrB,KAGD,iCACE,SAACnC,EAAD,CAAcC,WAAW,YAAzB,UAEE,iBAAKF,UAAU,4BAAf,WACE,SAAC,KAAD,CAAWqC,MAAOf,EAAYgB,SA9BpBC,KACZC,EAAAA,EAAAA,IAAgBD,EAAEE,OAAOJ,QAC3BZ,EAAc,MAGhBF,EAAcgB,EAAEE,OAAOJ,QAyBiCK,IAAKf,IACtDH,GAAa,gBAAKxB,UAAU,eAAf,SAA+BwB,IAAoB,WAIrE,gBAAKxB,UAAU,OAAf,UACGwC,EAAAA,EAAAA,IAAgBlB,IACf,SAACjB,EAAD,CACEI,OA/BS,MACZ+B,EAAAA,EAAAA,IAAgBlB,GAKrBO,EAAmB,CACjBI,UAAW,CACTU,KAAMrB,EACNsB,QAAS,aAPXnB,EAAc,kCA8BRf,eAAgB,IAAMmC,QAAQC,SAAQ,GAChCxC,QAAAA,EAASC,MAAAA,EAAOC,WAAAA,EAAYY,UAAAA,EAAWT,UAAAA,KAG/C,SAACR,EAAD,SAOV,SAAS4C,GAAW,UAAE3B,EAAF,WAAaZ,EAAb,aAAyBwC,EAAzB,MAAuCzC,EAAvC,QAA8CD,IAChE,MAAM,EAACgB,EAAD,EAAaC,IAAiBT,EAAAA,EAAAA,UAAiB,KAC/C,EAACmC,EAAD,EAAYC,IAAgBpC,EAAAA,EAAAA,WAAkB,IAC9C,EAACqC,EAAD,EAAeC,IAAmBtC,EAAAA,EAAAA,UAAwB,OAC1D,QAAEuC,EAAF,QAAWC,GAAYxB,EAAAA,EAAAA,uBAA6BkB,EAAcb,IAClEoB,EAA2BzB,EAAAA,EAAAA,6BAAkC,KACjEP,EAAc,IACd2B,GAAa,MAETvB,GAAeC,EAAAA,EAAAA,QAAyB,OACxC,mBAAE4B,IAAuBC,EAAAA,EAAAA,MAOzBC,EAAiBL,GAASM,QAAOC,GAAKA,EAAEC,SAAU,GAClDC,EAAgBJ,EAAeK,MACnC,CAACC,EAAkBC,IACjB,IAAIC,KAAKD,EAAEE,WAAYC,UAAY,IAAIF,KAAKF,EAAEG,WAAYC,YAMxDC,EAAmB9B,IACvBA,EAAE+B,kBAEGC,EAAAA,EAAAA,IAAcjD,GAGRoC,EAAec,KAAIZ,GAAKA,EAAEC,QAAOY,SAASnD,GACnD8B,EAAgB,qCAIlBA,EAAgB,MAChBF,GAAa,GACbK,EAAyB,CAAEtB,UAAW,CAAEC,YAAac,EAAcb,GAAI0B,MAAOvC,MAT5E8B,EAAgB,0BA4BpB,OAJArC,EAAAA,EAAAA,YAAU,KACRY,EAAarB,SAAS8B,UACrB,KAGD,iCACE,UAACnC,EAAD,CAAcC,WAAW,sBAAzB,WACE,kBAAMF,UAAU,gBAAgB0E,SAAUL,EAA1C,WACE,iBAAKrE,UAAU,2CAAf,WACE,SAAC,KAAD,CACE2E,YAAY,gBACZtC,MAAOf,EACPgB,SA3CMC,IAChBhB,EAAcgB,EAAEE,OAAOJ,QA2CbK,IAAKf,KAEP,SAAChC,EAAD,CAAaE,QAASwE,EAAiBvE,SAAUmD,EAAjD,SACGA,EAAY,UAAY,cAG5BE,GAAe,yBAAMA,IAAsB,SAE9C,gBAAKnD,UAAU,0BAAf,UACIsD,GAAWQ,GAAgB,SAAC,IAAD,CAAkBT,QAASS,EAAec,SAAO,IAAM,QAEtF,SAACC,EAAA,EAAD,CAAgB3C,YAAac,EAAcb,SAE7C,gBAAKnC,UAAU,OAAf,UACE,SAACK,EAAD,CACEM,WAAW,EACLL,QAAAA,EAASC,MAAAA,EAAOC,WAAAA,EAAYY,UAAAA,EAAWV,eA1C9B,IAChBY,EAIEkC,EAAmB,CACxBsB,QAAS,wCACTC,YACE,uGACFC,YAAa,qBAPNnC,QAAQC,SAAQ,UAuD7B,SAASmC,GAAW,UAAE7D,EAAF,aAAa4B,IAC/B,MAAMhB,EAAyBF,EAAAA,EAAAA,4BACzBoD,GAAiBC,EAAAA,EAAAA,KAAkB,GASzC,OACE,iCACE,SAAClF,EAAD,CAAcC,WAAW,sBAAzB,UACE,yBAAO,+BAET,gBAAKF,UAAU,OAAf,UACE,mBACEH,QAdQ,MACduF,EAAAA,EAAAA,MACApD,EAAuB,CAAEC,UAAW,CAAEC,YAAac,EAAab,MAChE+C,EAAgB,GAAElC,EAAab,MAC/Bf,KAWMpB,UAAWI,GAAAA,CACT,mKACA,2DAJJ,SAOI,4BAiDZ,ICnYA,GD+XkBiF,EAAAA,EAAAA,KAAQ,KAAM,KAAM,CACpCjE,UAAWkE,EAAAA,WAGb,EA1CA,SAAyBC,GACvB,MAAM,EAACjF,EAAD,EAAUE,IAAcM,EAAAA,EAAAA,UAAiB,IACzC,EAACkC,EAAD,EAAe3B,IAAmBP,EAAAA,EAAAA,UAA2B,MAEnE,IAAI0E,EACJ,MAAMC,EAAW,EAAH,KACTF,GADS,IAEZ/E,WAAAA,EACAa,gBAAAA,EACA2B,aAAAA,EACA1C,QAAAA,EACAC,MAAO,IAaT,OATEiF,EADc,IAAZlF,GACM,SAACa,EAAD,KAAgBsE,IACH,IAAZnF,GACD,SAACyC,EAAD,KAAgB0C,KAEhB,SAACR,EAAD,YAAqBQ,GAArB,IAA+BzC,aAAcA,OAMrD,+BACE,SAAC,KAAD,CAAO0C,QAAS,CAAEC,iBAAkB,eAAiBC,YAAaL,EAAMnE,UAAxE,UACE,gBACEpB,UAAU,qIACV6F,MAAO,CAAEC,MAAO,SAFlB,SAIGN","sources":["webpack://_N_E/./src/ui/components/shared/NewWorkspaceModal/NewWorkspaceModal.tsx","webpack://_N_E/./src/ui/components/shared/NewWorkspaceModal/index.tsx"],"sourcesContent":["import classNames from \"classnames\";\nimport React, {\n  ChangeEvent,\n  Dispatch,\n  MouseEventHandler,\n  SetStateAction,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport { ConnectedProps, connect } from \"react-redux\";\n\nimport { CreateNewWorkspace_createWorkspace_workspace } from \"graphql/CreateNewWorkspace\";\nimport * as actions from \"ui/actions/app\";\nimport { useRedirectToTeam } from \"ui/components/Library/Team/utils\";\nimport hooks from \"ui/hooks\";\nimport { Workspace, WorkspaceUser } from \"ui/types\";\nimport { removeUrlParameters } from \"ui/utils/environment\";\nimport { isValidTeamName, validateEmail } from \"ui/utils/helpers\";\n\nimport { useConfirm } from \"../Confirm\";\nimport { TextInput } from \"../Forms\";\nimport Modal from \"../NewModal\";\nimport { WorkspaceMembers } from \"../WorkspaceSettingsModal/WorkspaceSettingsModal\";\nimport InvitationLink from \"./InvitationLink\";\n\nfunction ModalButton({\n  children,\n  onClick = () => {},\n  disabled = false,\n}: {\n  children: React.ReactElement | string;\n  onClick?: MouseEventHandler;\n  disabled?: boolean;\n}) {\n  return (\n    <button\n      type=\"button\"\n      onClick={onClick}\n      disabled={disabled}\n      className={\n        \"max-w-max items-center rounded-md border border-transparent bg-primaryAccent px-4 py-2 font-medium text-white shadow-sm hover:bg-primaryAccentHover focus:outline-none focus:ring-2 focus:ring-primaryAccent focus:ring-offset-2\"\n      }\n    >\n      {children}\n    </button>\n  );\n}\n\nfunction SlideContent({\n  headerText,\n  children,\n}: {\n  headerText: string;\n  children: React.ReactElement | (React.ReactElement | null)[];\n}) {\n  return (\n    <div className=\"flex flex-grow flex-col space-y-3 overflow-hidden\">\n      <h2 className=\"text-2xl \">{headerText}</h2>\n      <div className=\"flex flex-grow flex-col space-y-3 overflow-hidden text-gray-500\">\n        {children}\n      </div>\n    </div>\n  );\n}\n\nfunction DisabledNextButton() {\n  return (\n    <button\n      disabled={true}\n      type=\"button\"\n      className={classNames(\n        \"items-center rounded-md border border-transparent px-3 py-1.5 font-medium shadow-sm focus:outline-none\",\n        \"bg-gray-300 text-gray-600\"\n      )}\n    >\n      Next\n    </button>\n  );\n}\n\nfunction NextButton({\n  current,\n  total,\n  setCurrent,\n  onNext,\n  didUserConfirm,\n  allowNext,\n}: {\n  current: number;\n  total: number;\n  setCurrent: Dispatch<SetStateAction<number>>;\n  hideModal: typeof actions.hideModal;\n  didUserConfirm: () => Promise<boolean>;\n  onNext?: () => void;\n  allowNext: boolean;\n}) {\n  const [nextClicked, setNextClicked] = useState<boolean>(false);\n\n  const onClick = () => {\n    didUserConfirm().then(confirmed => {\n      if (!confirmed) {\n        return;\n      }\n\n      if (onNext) {\n        onNext();\n      }\n\n      setNextClicked(true);\n    });\n  };\n\n  useEffect(() => {\n    // Only navigate to the next slide the work that eventually turns\n    // allowNext to true is finished. This allows us to do mutations\n    // in between navigations.\n    if (allowNext && nextClicked) {\n      setCurrent(current => current + 1);\n    }\n  }, [allowNext, nextClicked, setCurrent]);\n\n  const inferLoading = nextClicked && !allowNext;\n  const buttonText = inferLoading ? \"Loading\" : \"Next\";\n\n  return (\n    <button\n      onClick={onClick}\n      disabled={current == total}\n      type=\"button\"\n      className={classNames(\n        \"items-center rounded-md border border-transparent px-3 py-1.5 font-medium shadow-sm focus:outline-none focus:ring-2 focus:ring-primaryAccent focus:ring-offset-2\",\n        {\n          \"bg-primaryAccent text-white hover:bg-primaryAccentHover\": current < total,\n        }\n      )}\n    >\n      {buttonText}\n    </button>\n  );\n}\n\ntype SlideBodyProps = PropsFromRedux & {\n  setCurrent: Dispatch<SetStateAction<number>>;\n  setNewWorkspace: Dispatch<SetStateAction<Workspace | null>>;\n  newWorkspace: Workspace | null;\n  total: number;\n  current: number;\n};\n\nfunction SlideBody1({ hideModal, setNewWorkspace, setCurrent, total, current }: SlideBodyProps) {\n  const [inputValue, setInputValue] = useState<string>(\"\");\n  const [inputError, setInputError] = useState<string | null>(null);\n  const [allowNext, setAllowNext] = useState<boolean>(false);\n  const textInputRef = useRef<HTMLInputElement>(null);\n\n  const createNewWorkspace = hooks.useCreateNewWorkspace(onNewWorkspaceCompleted);\n  const updateDefaultWorkspace = hooks.useUpdateDefaultWorkspace();\n\n  function onNewWorkspaceCompleted(workspace: CreateNewWorkspace_createWorkspace_workspace) {\n    setNewWorkspace(workspace);\n    updateDefaultWorkspace({\n      variables: {\n        workspaceId: workspace.id,\n      },\n    });\n    setAllowNext(true);\n  }\n  const onChange = (e: ChangeEvent<HTMLInputElement>) => {\n    if (isValidTeamName(e.target.value)) {\n      setInputError(null);\n    }\n\n    setInputValue(e.target.value);\n  };\n  const handleSave = () => {\n    if (!isValidTeamName(inputValue)) {\n      setInputError(\"The team name cannot be blank\");\n      return;\n    }\n\n    createNewWorkspace({\n      variables: {\n        name: inputValue,\n        planKey: \"team-v1\",\n      },\n    });\n  };\n\n  useEffect(() => {\n    textInputRef.current?.focus();\n  }, []);\n\n  return (\n    <>\n      <SlideContent headerText=\"Team name\">\n        {/* <form onSubmit={handleSave} className=\"flex flex-col space-y-4\"> */}\n        <div className=\"flex flex-col py-3 px-0.5\">\n          <TextInput value={inputValue} onChange={onChange} ref={textInputRef} />\n          {inputError ? <div className=\"text-red-500\">{inputError}</div> : null}\n        </div>\n        {/* </form> */}\n      </SlideContent>\n      <div className=\"grid\">\n        {isValidTeamName(inputValue) ? (\n          <NextButton\n            onNext={handleSave}\n            didUserConfirm={() => Promise.resolve(true)}\n            {...{ current, total, setCurrent, hideModal, allowNext }}\n          />\n        ) : (\n          <DisabledNextButton />\n        )}\n      </div>\n    </>\n  );\n}\n\nfunction SlideBody2({ hideModal, setCurrent, newWorkspace, total, current }: SlideBodyProps) {\n  const [inputValue, setInputValue] = useState<string>(\"\");\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [errorMessage, setErrorMessage] = useState<string | null>(null);\n  const { members, loading } = hooks.useGetWorkspaceMembers(newWorkspace!.id);\n  const inviteNewWorkspaceMember = hooks.useInviteNewWorkspaceMember(() => {\n    setInputValue(\"\");\n    setIsLoading(false);\n  });\n  const textInputRef = useRef<HTMLInputElement>(null);\n  const { confirmDestructive } = useConfirm();\n\n  // This is hacky. A member entry will only have an e-mail if it was pending. If\n  // they had already accepted, we don't expose that member's e-mail. This is not\n  // a concern for now, since this will only run right as the team is created. It's\n  // unlikely that while this slide is up that a pending member would accept the invite\n  // immediately.\n  const pendingMembers = members?.filter(m => m.email) || [];\n  const sortedMembers = pendingMembers.sort(\n    (a: WorkspaceUser, b: WorkspaceUser) =>\n      new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime()\n  );\n\n  const onChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setInputValue(e.target.value);\n  };\n  const handleAddMember = (e: React.FormEvent | React.MouseEvent) => {\n    e.preventDefault();\n\n    if (!validateEmail(inputValue)) {\n      setErrorMessage(\"Invalid email address\");\n      return;\n    } else if (pendingMembers.map(m => m.email).includes(inputValue)) {\n      setErrorMessage(\"Address has already been invited\");\n      return;\n    }\n\n    setErrorMessage(null);\n    setIsLoading(true);\n    inviteNewWorkspaceMember({ variables: { workspaceId: newWorkspace!.id, email: inputValue } });\n  };\n  const didUserConfirm = () => {\n    if (!inputValue) {\n      return Promise.resolve(true);\n    }\n\n    return confirmDestructive({\n      message: \"Continue without sending invitations?\",\n      description:\n        \"You started to invite someone, but didn't press the invite button. Are you sure you want to proceed?\",\n      acceptLabel: \"Continue anyways\",\n    });\n  };\n\n  useEffect(() => {\n    textInputRef.current?.focus();\n  }, []);\n\n  return (\n    <>\n      <SlideContent headerText=\"Invite team members\">\n        <form className=\"flex flex-col\" onSubmit={handleAddMember}>\n          <div className=\"flex flex-grow flex-row space-x-3 px-0.5\">\n            <TextInput\n              placeholder=\"Email address\"\n              value={inputValue}\n              onChange={onChange}\n              ref={textInputRef}\n            />\n            <ModalButton onClick={handleAddMember} disabled={isLoading}>\n              {isLoading ? \"Loading\" : \"Invite\"}\n            </ModalButton>\n          </div>\n          {errorMessage ? <div>{errorMessage}</div> : null}\n        </form>\n        <div className=\"flex-grow overflow-auto\">\n          {!loading && sortedMembers ? <WorkspaceMembers members={sortedMembers} isAdmin /> : null}\n        </div>\n        <InvitationLink workspaceId={newWorkspace!.id} />\n      </SlideContent>\n      <div className=\"grid\">\n        <NextButton\n          allowNext={true}\n          {...{ current, total, setCurrent, hideModal, didUserConfirm }}\n        />\n      </div>\n    </>\n  );\n}\n\ntype SlideBody3Props = PropsFromRedux & {\n  setCurrent: Dispatch<SetStateAction<number>>;\n  setNewWorkspace: Dispatch<SetStateAction<Workspace | null>>;\n  newWorkspace: Workspace;\n  total: number;\n  current: number;\n};\n\nfunction SlideBody3({ hideModal, newWorkspace }: SlideBody3Props) {\n  const updateDefaultWorkspace = hooks.useUpdateDefaultWorkspace();\n  const redirectToTeam = useRedirectToTeam(true);\n\n  const onClick = () => {\n    removeUrlParameters();\n    updateDefaultWorkspace({ variables: { workspaceId: newWorkspace.id } });\n    redirectToTeam(`${newWorkspace.id}`);\n    hideModal();\n  };\n\n  return (\n    <>\n      <SlideContent headerText=\"Team setup complete\">\n        <div>{`Your new team is ready.`}</div>\n      </SlideContent>\n      <div className=\"grid\">\n        <button\n          onClick={onClick}\n          className={classNames(\n            \"items-center rounded-md border border-transparent px-3 py-1.5 font-medium shadow-sm focus:outline-none focus:ring-2 focus:ring-primaryAccent focus:ring-offset-2\",\n            \"bg-primaryAccent text-white hover:bg-primaryAccentHover\"\n          )}\n        >\n          {`Take me to my team`}\n        </button>\n      </div>\n    </>\n  );\n}\n\nfunction OnboardingModal(props: PropsFromRedux) {\n  const [current, setCurrent] = useState<number>(1);\n  const [newWorkspace, setNewWorkspace] = useState<Workspace | null>(null);\n\n  let slide;\n  const newProps = {\n    ...props,\n    setCurrent,\n    setNewWorkspace,\n    newWorkspace,\n    current,\n    total: 4,\n  };\n\n  if (current === 1) {\n    slide = <SlideBody1 {...newProps} />;\n  } else if (current === 2) {\n    slide = <SlideBody2 {...newProps} />;\n  } else {\n    slide = <SlideBody3 {...{ ...newProps, newWorkspace: newWorkspace! }} />;\n  }\n\n  const height = current == 2 ? \"520px\" : \"360px\";\n\n  return (\n    <>\n      <Modal options={{ maskTransparency: \"translucent\" }} onMaskClick={props.hideModal}>\n        <div\n          className=\"text-modalColor relative flex flex-col justify-between space-y-2 rounded-lg bg-modalBgcolor p-4 text-sm shadow-xl backdrop-blur-sm\"\n          style={{ width: \"480px\" }}\n        >\n          {slide}\n        </div>\n      </Modal>\n    </>\n  );\n}\n\nconst connector = connect(() => ({}), {\n  hideModal: actions.hideModal,\n});\ntype PropsFromRedux = ConnectedProps<typeof connector>;\nexport default connector(OnboardingModal);\n","import NewWorkspaceModal from \"./NewWorkspaceModal\";\n\nexport default NewWorkspaceModal;\n"],"names":["ModalButton","children","onClick","disabled","type","className","SlideContent","headerText","DisabledNextButton","classNames","NextButton","current","total","setCurrent","onNext","didUserConfirm","allowNext","nextClicked","setNextClicked","useState","useEffect","buttonText","then","confirmed","SlideBody1","hideModal","setNewWorkspace","inputValue","setInputValue","inputError","setInputError","setAllowNext","textInputRef","useRef","createNewWorkspace","hooks","workspace","updateDefaultWorkspace","variables","workspaceId","id","focus","value","onChange","e","isValidTeamName","target","ref","name","planKey","Promise","resolve","SlideBody2","newWorkspace","isLoading","setIsLoading","errorMessage","setErrorMessage","members","loading","inviteNewWorkspaceMember","confirmDestructive","useConfirm","pendingMembers","filter","m","email","sortedMembers","sort","a","b","Date","createdAt","getTime","handleAddMember","preventDefault","validateEmail","map","includes","onSubmit","placeholder","isAdmin","InvitationLink","message","description","acceptLabel","SlideBody3","redirectToTeam","useRedirectToTeam","removeUrlParameters","connect","actions","props","slide","newProps","options","maskTransparency","onMaskClick","style","width"],"sourceRoot":""}