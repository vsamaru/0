{"version":3,"file":"static/chunks/986.213f0b10ef83e69e.js","mappings":"wNAQAA,EAAQ,OACRA,EAAQ,OACRA,EAAQ,OACRA,EAAQ,OACRA,EAAQ,OACRA,EAAQ,OACRA,EAAQ,OACRA,EAAQ,OACRA,EAAQ,OACRA,EAAQ,OACRA,EAAQ,MAYD,MAAMC,EAKXC,YAAYC,IAAqB,yDAC/BC,KAAKD,KAAOA,EAGdE,qBAAqBC,GACnBF,KAAKG,OAASC,GAAAA,CAAWF,EAAMF,KAAKD,MAGtCM,UAEML,KAAKG,OAAOG,MAEdN,KAAKG,OAAOG,IAAIC,GAAK,MAIrBC,iBACF,OAAOR,KAAKG,OAGVC,iBACF,OAAOA,IAGTK,QACET,KAAKG,OAAOM,QAGdC,QAAQC,GACNX,KAAKG,OAAOS,SAASD,GAGvBE,UACE,OAAOb,KAAKG,OAAOW,WAGrBC,eACE,OAAOf,KAAKG,OAAOY,eAGrBC,WAAU,KAAEC,EAAF,GAAQC,GAAoCC,GACpDnB,KAAKoB,UAAUH,EAAME,GACrBnB,KAAKG,OAAOa,UAAU,CAAEC,KAAMA,EAAMC,GAAIA,IAG1CG,QAAQC,GACNtB,KAAKG,OAAOoB,UAAU,OAAQD,GAOhCE,gBAAgBlB,GACdN,KAAKG,OAAOsB,QAAQnB,GAQtBoB,iBACE,OAAO,IAAItB,IAAAA,KAAe,IAS5BgB,UAAUH,EAAcE,EAAQ,OAC9B,MAAMZ,EAAKP,KAAKG,OACVwB,EAAmBpB,EAAGqB,oBAAoBC,wBAE1CC,EAAOvB,EAAGwB,aAAaJ,EAAiBK,IAAK,QAC7CC,EAAK1B,EAAGwB,aAAaJ,EAAiBO,OAASP,EAAiBK,IAAK,QAErEG,EAAeF,EAAKH,EACpBM,EAAcC,KAAKC,MAAMH,EAAe,GAG9C,GAAIlB,GAAQgB,GAAMhB,GAAQa,EACxB,OAMF,MAAMS,EAASF,KAAKG,IAAIJ,EAnGA,GAqGxB,IAAIK,EACF,CACEC,OAAQL,KAAKM,IAAI1B,EAAOmB,EAAa,GACrCQ,OAAQP,KAAKM,IAAI1B,EAAOkB,EAAeI,EAAQ,GAC/CP,IAAKK,KAAKM,IAAI1B,EAAOsB,EAAQ,IAC7BpB,GAAS,QAAUoB,EAGvBE,EAAUJ,KAAKG,IAAIC,EAASlC,EAAGsC,aAC/B7C,KAAK8C,oBAAoBL,GAO3BK,oBAAoB7B,GAClB,MAAM,IAAEe,GAAQhC,KAAKG,OAAO4C,WAAW,CAAE9B,KAAAA,EAAMC,GAAI,GAAK,SACxDlB,KAAKG,OAAO6C,SAAS,EAAGhB,IAI5B","sources":["webpack://_N_E/./src/devtools/client/debugger/src/utils/editor/source-editor.ts"],"sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at <http://mozilla.org/MPL/2.0/>. */\n\n// export const CodeMirror = require(\"codemirror\");\nimport type { Doc, DocOrEditor, Editor } from \"codemirror\";\nimport { default as CodeMirror } from \"codemirror\";\n\nrequire(\"codemirror/mode/javascript/javascript\");\nrequire(\"codemirror/mode/htmlmixed/htmlmixed\");\nrequire(\"codemirror/mode/coffeescript/coffeescript\");\nrequire(\"codemirror/mode/jsx/jsx\");\nrequire(\"codemirror/mode/elm/elm\");\nrequire(\"codemirror/mode/clojure/clojure\");\nrequire(\"codemirror/mode/haxe/haxe\");\nrequire(\"codemirror/addon/search/searchcursor\");\nrequire(\"codemirror/addon/runmode/runmode\");\nrequire(\"codemirror/addon/selection/active-line\");\nrequire(\"codemirror/addon/edit/matchbrackets\");\n\nexport { CodeMirror };\n\nexport type EditorWithDoc = Editor & { doc: Doc; display: { viewFrom: number; viewTo: number } };\n\n// Maximum allowed margin (in number of lines) from top or bottom of the editor\n// while shifting to a line which was initially out of view.\nconst MAX_VERTICAL_OFFSET = 3;\n\ntype $FixTypeLater = any;\n\nexport class SourceEditor {\n  opts: $FixTypeLater;\n  // @ts-expect-error  created later\n  editor: EditorWithDoc;\n\n  constructor(opts: $FixTypeLater) {\n    this.opts = opts;\n  }\n\n  appendToLocalElement(node: HTMLElement) {\n    this.editor = CodeMirror(node, this.opts) as EditorWithDoc;\n  }\n\n  destroy() {\n    // Unlink the current document.\n    if (this.editor.doc) {\n      // @ts-expect-error cm doesn't exist\n      this.editor.doc.cm = null;\n    }\n  }\n\n  get codeMirror() {\n    return this.editor;\n  }\n\n  get CodeMirror() {\n    return CodeMirror;\n  }\n\n  focus() {\n    this.editor.focus();\n  }\n\n  setText(str: string) {\n    this.editor.setValue(str);\n  }\n\n  getText() {\n    return this.editor.getValue();\n  }\n\n  getSelection() {\n    return this.editor.getSelection();\n  }\n\n  setCursor({ line, ch }: { line: number; ch: number }, align: string) {\n    this.alignLine(line, align);\n    this.editor.setCursor({ line: line, ch: ch });\n  }\n\n  setMode(value: string | CodeMirror.ModeSpec<CodeMirror.ModeSpecOptions>) {\n    this.editor.setOption(\"mode\", value);\n  }\n\n  /**\n   * Replaces the current document with a new source document\n   * @memberof utils/source-editor\n   */\n  replaceDocument(doc: Doc) {\n    this.editor.swapDoc(doc);\n  }\n\n  /**\n   * Creates a CodeMirror Document\n   * @returns CodeMirror.Doc\n   * @memberof utils/source-editor\n   */\n  createDocument() {\n    return new CodeMirror.Doc(\"\");\n  }\n\n  /**\n   * Aligns the provided line to either \"top\", \"center\" or \"bottom\" of the\n   * editor view with a maximum margin of MAX_VERTICAL_OFFSET lines from top or\n   * bottom.\n   * @memberof utils/source-editor\n   */\n  alignLine(line: number, align = \"top\") {\n    const cm = this.editor;\n    const editorClientRect = cm.getWrapperElement().getBoundingClientRect();\n\n    const from = cm.lineAtHeight(editorClientRect.top, \"page\");\n    const to = cm.lineAtHeight(editorClientRect.height + editorClientRect.top, \"page\");\n\n    const linesVisible = to - from;\n    const halfVisible = Math.round(linesVisible / 2);\n\n    // If the target line is in view, skip the vertical alignment part.\n    if (line <= to && line >= from) {\n      return;\n    }\n\n    // Setting the offset so that the line always falls in the upper half\n    // of visible lines (lower half for bottom aligned).\n    // MAX_VERTICAL_OFFSET is the maximum allowed value.\n    const offset = Math.min(halfVisible, MAX_VERTICAL_OFFSET);\n\n    let topLine =\n      {\n        center: Math.max(line - halfVisible, 0),\n        bottom: Math.max(line - linesVisible + offset, 0),\n        top: Math.max(line - offset, 0),\n      }[align || \"top\"] || offset;\n\n    // Bringing down the topLine to total lines in the editor if exceeding.\n    topLine = Math.min(topLine, cm.lineCount());\n    this.setFirstVisibleLine(topLine);\n  }\n\n  /**\n   * Scrolls the view such that the given line number is the first visible line.\n   * @memberof utils/source-editor\n   */\n  setFirstVisibleLine(line: number) {\n    const { top } = this.editor.charCoords({ line, ch: 0 }, \"local\");\n    this.editor.scrollTo(0, top);\n  }\n}\n\nexport default SourceEditor;\n"],"names":["require","SourceEditor","constructor","opts","this","appendToLocalElement","node","editor","CodeMirror","destroy","doc","cm","codeMirror","focus","setText","str","setValue","getText","getValue","getSelection","setCursor","line","ch","align","alignLine","setMode","value","setOption","replaceDocument","swapDoc","createDocument","editorClientRect","getWrapperElement","getBoundingClientRect","from","lineAtHeight","top","to","height","linesVisible","halfVisible","Math","round","offset","min","topLine","center","max","bottom","lineCount","setFirstVisibleLine","charCoords","scrollTo"],"sourceRoot":""}